{"version":3,"sources":["components/Book.js","components/BookList.js","components/UpcomingBooks.js","App.js","api/index.js","serviceWorker.js","index.js"],"names":["Book","book","className","href","goodreads_link","target","size","hoverable","cover","src","image","alt","Meta","title","best_of","style","color","marginRight","type","theme","worst_of","description","author","year_published","BookList","books","map","idx","key","xs","sm","md","lg","UpcomingBooks","state","visible","showDrawer","setState","onClose","this","props","onClick","length","placement","closable","height","React","Component","App","useState","setBooks","useEffect","fetch","then","response","json","recentBooks","reverse","years","Set","b","year","filter","y","isNaN","currentlyReading","find","upcoming","subTitle","orientation","display","alignItems","fontSize","booksInYear","fontWeight","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7eb8e293.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card, Icon} from 'antd';\n\nconst Book = ({book}) => {\n  if (!book) return null;\n  return (\n      <div className=\"Book\">\n          <a href={book.goodreads_link} target=\"_blank\">\n            <Card\n                size=\"small\"\n                hoverable\n                cover={\n                  <img src={book.image} alt=\"Book cover\"/>\n                }\n            >\n              <Card.Meta\n                  title={\n                      <div>\n                          <span className=\"Book-icon\">\n                              {book.best_of === 'TRUE' && <Icon style={{color: '#c60000', marginRight: 5}} type=\"heart\" theme=\"filled\" />}\n                              {book.worst_of === 'TRUE' && <Icon style={{color: 'gray', marginRight: 5}} type=\"dislike\" theme=\"filled\" />}\n                          </span>\n                          {book.title}\n                      </div>\n                  }\n                  description={\n                    <>\n                      {/*<div>{book.series}</div>*/}\n                      <div>by {book.author}</div>\n                      <div className=\"Book-year\">{book.year_published}</div>\n                    </>\n                  }\n              />\n            </Card>\n          </a>\n      </div>\n  );\n};\n\nexport default Book;\n","import React from 'react';\nimport {Row, Col} from 'antd';\nimport Book from './Book';\n\nconst BookList = ({books}) => {\n  return (\n      <Row className=\"BookList\">\n        {books.map((book, idx) =>\n            <Col key={idx} xs={12} sm={8} md={6} lg={4} className=\"BookList-item\">\n              <div className=\"BookList-item-margin\">\n                <Book book={book} key={idx}/>\n              </div>\n            </Col>\n        )}\n      </Row>\n  )\n};\n\nexport default BookList;\n","import React from \"react\";\nimport { Drawer, Button, Icon } from 'antd';\nimport BookList from \"./BookList\";\n\nclass UpcomingBooks extends React.Component {\n  state = { visible: false };\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    const { books } = this.props;\n\n    return (\n        <div>\n          <Button type=\"default\" onClick={this.showDrawer}>\n            {books.length} Upcoming <Icon type=\"double-right\" />\n          </Button>\n          <Drawer\n              title={`Upcoming Books (${books.length})`}\n              placement=\"bottom\"\n              closable\n              onClose={this.onClose}\n              visible={this.state.visible}\n              height={515}\n          >\n            <BookList books={books} />\n          </Drawer>\n        </div>\n    );\n  }\n}\n\nexport default UpcomingBooks;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Book from \"./components/Book\";\nimport BookList from \"./components/BookList\";\nimport UpcomingBooks from \"./components/UpcomingBooks\";\nimport * as api from './api';\nimport {Icon, PageHeader, Row, Col, Divider} from 'antd';\n\nconst App = () => {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    api.getBooks().then(setBooks);\n  }, []);\n\n  const recentBooks = books.reverse();\n  const years = [...new Set(books.map(b => b.year))].filter(y => !isNaN(y));\n\n  const currentlyReading = books.find(b => b.year === 'Currently Reading');\n  const upcoming = books.filter(b => b.year === 'Upcoming').reverse();\n\n  return (\n      <div className=\"App\">\n        <PageHeader\n            title={<><Icon type=\"book\" /> Book Club</>}\n            subTitle=\"Alive and kicking since 2015\"/>\n\n            <Divider orientation=\"left\">\n               <span style={{display: 'inline-flex', alignItems: 'center'}}>\n                   <Icon type=\"pushpin\" style={{marginRight: 5}} />\n                   <span style={{fontSize: 24}}>Currently Reading</span>\n               </span>\n            </Divider>\n            <Row className=\"BookList\">\n                <Col xs={12} sm={8} md={6} lg={4} className=\"BookList-item\">\n                    <div className=\"BookList-item-margin\">\n                        <Book book={currentlyReading} />\n                    </div>\n                </Col>\n                <Col xs={12} sm={8} md={6} lg={4} className=\"BookList-item\">\n                    <div className=\"BookList-item-margin\">\n                        <UpcomingBooks books={upcoming} />\n                    </div>\n                </Col>\n            </Row>\n\n        {\n          years.map((year, idx) => {\n             const booksInYear = recentBooks.filter(b => b.year === year);\n             return (\n                 <div key={idx}>\n                     <Divider orientation=\"left\">\n                       <span style={{display: 'inline-flex', alignItems: 'center'}}>\n                           <Icon type=\"double-right\" style={{marginRight: 5}} />\n                           <span style={{fontSize: 24}}>{year}</span>\n                       </span>\n                       <span style={{fontSize: 14, color: 'gray', fontWeight: 'normal', marginLeft: 10}}>{booksInYear.length} Books</span>\n                     </Divider>\n                <BookList books={booksInYear}/>\n              </div>\n             );\n          })\n        }\n      </div>\n  );\n};\n\nexport default App;\n","const sheetBestUrl = \"https://sheet.best/api/sheets/aa1f111c-28d5-4803-bf7f-64a3f2295352\";\n\nexport const getBooks = () => {\n  return fetch(sheetBestUrl)\n    .then((response) => {\n      return response.json();\n    });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}