{"version":3,"sources":["components/Book.js","components/BookList.js","components/UpcomingBooks.js","App.js","api/index.js","serviceWorker.js","index.js"],"names":["Book","book","className","href","goodreads_link","target","size","hoverable","cover","src","image","alt","Meta","title","best_of","HeartFilled","style","color","marginRight","worst_of","DislikeFilled","description","author","year_published","BookList","books","map","idx","xs","sm","md","lg","UpcomingBooks","state","visible","showDrawer","setState","onClose","this","props","marginLeft","marginBottom","CalendarOutlined","type","onClick","padding","paddingLeft","lineHeight","height","fontSize","length","placement","closable","React","Component","App","useState","setBooks","useEffect","fetch","then","response","json","recentBooks","reverse","years","Set","b","year","filter","y","isNaN","currentlyReading","find","upcoming","BookOutlined","subTitle","PushpinOutlined","hideXs","hideSm","hideMd","hideLg","booksInYear","orientation","display","alignItems","DoubleRightOutlined","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5594ad7d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card} from 'antd';\nimport {HeartFilled, DislikeFilled} from '@ant-design/icons';\n\nconst Book = ({book}) => {\n  if (!book) return null;\n  return (\n      <div className=\"Book\">\n          <a href={book.goodreads_link} target=\"_blank\">\n            <Card\n                size=\"small\"\n                hoverable\n                cover={\n                  <img src={book.image} alt=\"Book cover\"/>\n                }\n            >\n              <Card.Meta\n                  title={\n                      <div>\n                          <span className=\"Book-icon\">\n                              {book.best_of === 'TRUE' && <HeartFilled style={{color: '#c60000', marginRight: 5}} />}\n                              {book.worst_of === 'TRUE' && <DislikeFilled style={{color: 'gray', marginRight: 5}} />}\n                          </span>\n                          {book.title}\n                      </div>\n                  }\n                  description={\n                    <>\n                      {/*<div>{book.series}</div>*/}\n                      <div className=\"Book-author\">{book.author}</div>\n                      <div className=\"Book-year\">{book.year_published}</div>\n                    </>\n                  }\n              />\n            </Card>\n          </a>\n      </div>\n  );\n};\n\nexport default Book;\n","import React from 'react';\nimport {Col} from 'antd';\nimport Book from './Book';\n\nconst BookList = ({books, className = ''}) => {\n  return (\n    books.map((book, idx) =>\n        <Col key={idx} xs={12} sm={8} md={6} lg={4} className={`BookList-item ${className}`} >\n          <div className=\"BookList-item-margin\">\n            <Book book={book} key={idx}/>\n          </div>\n        </Col>\n    )\n  );\n};\n\nexport default BookList;\n","import React from \"react\";\nimport { Drawer, Button, Row } from 'antd';\nimport BookList from \"./BookList\";\nimport {CalendarOutlined} from '@ant-design/icons';\n\nclass UpcomingBooks extends React.Component {\n  state = { visible: false };\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    const { books } = this.props;\n\n    return (\n        <div>\n            <h4 style={{marginLeft: '5px', marginBottom: '0'}}>\n                <CalendarOutlined style={{marginRight: 5}} />Upcoming\n                <Button\n                    type=\"link\"\n                    onClick={this.showDrawer}\n                    style={{\n                        padding: '0',\n                        paddingLeft: '15px',\n                        lineHeight: 'inherit',\n                        height: 'inherit',\n                        fontSize: '12px'\n                    }}\n                >\n                    View all\n                    {/*{books.length} Upcoming <DoubleRightOutlined />*/}\n                </Button>\n            </h4>\n          <Drawer\n              title={`Upcoming Books (${books.length})`}\n              placement=\"bottom\"\n              closable\n              onClose={this.onClose}\n              visible={this.state.visible}\n              height={515}\n          >\n              <Row>\n                  <BookList books={books} />\n              </Row>\n          </Drawer>\n        </div>\n    );\n  }\n}\n\nexport default UpcomingBooks;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Book from \"./components/Book\";\nimport BookList from \"./components/BookList\";\nimport UpcomingBooks from \"./components/UpcomingBooks\";\nimport * as api from './api';\nimport {PageHeader, Row, Col, Divider, Button} from 'antd';\nimport {BookOutlined, CalendarOutlined, DoubleRightOutlined, PushpinOutlined} from '@ant-design/icons';\n\nconst App = () => {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    api.getBooks().then(setBooks);\n  }, []);\n\n  const recentBooks = books.reverse();\n  const years = [...new Set(books.map(b => b.year))].filter(y => !isNaN(y));\n\n  const currentlyReading = books.find(b => b.year === 'Currently Reading');\n  const upcoming = books.filter(b => b.year === 'Upcoming').reverse();\n\n  return (\n      <div className=\"App\">\n        <PageHeader\n            title={<><BookOutlined />  Book Club</>}\n            subTitle=\"Alive and kicking since 2015\"/>\n          <h2 style={{marginLeft: '5px', marginBottom: '0'}}>\n              <PushpinOutlined style={{marginRight: 5}} />Reading Now\n          </h2>\n            <Row className=\"BookList\">\n\n                <BookList books={[currentlyReading]} className=\"BookList-item-current\"/>\n\n                <Col xs={12} sm={16} md={18} lg={20}>\n                    <UpcomingBooks books={upcoming} />\n                    <Row className=\"upcoming-books\">\n                        {upcoming.map((book, idx) => {\n                            const hideXs = idx > 0, hideSm = idx > 1, hideMd = idx > 3, hideLg = idx > 5;\n                            return (\n                                <Col key={idx} xs={22} sm={10} md={6} lg={4}\n                                     className={`BookList-item BookList-item-current ${hideXs ? 'hideXs' : ''} ${hideSm ? 'hideSm' : ''} ${hideMd ? 'hideMd' : ''} ${hideLg ? 'hideLg' : ''}`}>\n                                    <div className=\"BookList-item-margin\">\n                                        <Book book={book} key={idx}/>\n                                    </div>\n                                </Col>\n                            )}\n                        )}\n                    </Row>\n                </Col>\n            </Row>\n\n        {\n          years.map((year, idx) => {\n             const booksInYear = recentBooks.filter(b => b.year === year);\n             return (\n                 <div key={idx}>\n                     <Divider orientation=\"left\">\n                       <span style={{display: 'inline-flex', alignItems: 'center'}}>\n                           <DoubleRightOutlined style={{marginRight: 5}} />\n                           <span style={{fontSize: 24}}>{year}</span>\n                       </span>\n                       <span style={{fontSize: 14, color: 'gray', fontWeight: 'normal', marginLeft: 10}}>{booksInYear.length} Books</span>\n                     </Divider>\n                     <Row className=\"BookList\">\n                        <BookList books={booksInYear}/>\n                     </Row>\n                </div>\n             );\n          })\n        }\n      </div>\n  );\n};\n\nexport default App;\n","const sheetBestUrl = \"https://sheet.best/api/sheets/aa1f111c-28d5-4803-bf7f-64a3f2295352\";\n\nexport const getBooks = () => {\n  return fetch(sheetBestUrl)\n    .then((response) => {\n      return response.json();\n    });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}