{"version":3,"sources":["components/Book.js","components/BookList.js","components/UpcomingBooks.js","App.js","api/index.js","serviceWorker.js","index.js"],"names":["Book","book","className","size","hoverable","cover","src","image","alt","year_published","Meta","title","description","series","author","BookList","books","map","idx","xs","sm","md","lg","key","UpcomingBooks","state","visible","showDrawer","setState","onClose","this","props","type","onClick","length","placement","closable","height","React","Component","App","useState","setBooks","useEffect","fetch","then","response","json","recentBooks","reverse","years","Set","b","year","filter","y","isNaN","currentlyReading","upcoming","Title","level","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTAsCeA,EAnCF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACb,OACI,yBAAKC,UAAU,QACb,kBAAC,IAAD,CACIC,KAAK,QACLC,WAAS,EACTC,MACE,oCACE,yBAAKC,IAAKL,EAAKM,MAAOC,IAAI,eAC1B,yBAAKN,UAAU,aACb,yBAAKA,UAAU,kBACZD,EAAKQ,mBAMhB,yBAAKP,UAAU,cAIf,kBAAC,IAAKQ,KAAN,CACIC,MAAOV,EAAKU,MACZC,YACE,oCACE,6BAAMX,EAAKY,QACX,mCAASZ,EAAKa,cCXjBC,EAdE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACjB,OACI,kBAAC,IAAD,CAAKd,UAAU,YACZc,EAAMC,KAAI,SAAChB,EAAMiB,GAAP,OACP,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGpB,UAAU,iBAC1C,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAMD,KAAMA,EAAMsB,IAAKL,W,sECgCxBM,E,2MArCbC,MAAQ,CAAEC,SAAS,G,EAEnBC,WAAa,WACX,EAAKC,SAAS,CACZF,SAAS,K,EAIbG,QAAU,WACR,EAAKD,SAAS,CACZF,SAAS,K,wEAIH,IACAV,EAAUc,KAAKC,MAAff,MAER,OACI,6BACE,kBAAC,IAAD,CAAQgB,KAAK,UAAUC,QAASH,KAAKH,YAArC,QACQX,EAAMkB,OADd,iBACqD,IAAjBlB,EAAMkB,OAAe,GAAK,IAAI,kBAAC,IAAD,CAAMF,KAAK,kBAE7E,kBAAC,IAAD,CACIrB,MAAK,0BAAqBK,EAAMkB,OAA3B,KACLC,UAAU,SACVC,UAAQ,EACRP,QAASC,KAAKD,QACdH,QAASI,KAAKL,MAAMC,QACpBW,OAAQ,KAEV,kBAAC,EAAD,CAAUrB,MAAOA,U,GA/BDsB,IAAMC,W,kBCqCnBC,EAlCH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTzB,EADS,KACF0B,EADE,KAGhBC,qBAAU,WCPHC,MAHY,sEAIhBC,MAAK,SAACC,GACL,OAAOA,EAASC,UDMHF,KAAKH,KACnB,IAEH,IAAMM,EAAchC,EAAMiC,UACpBC,EAAQ,YAAI,IAAIC,IAAInC,EAAMC,KAAI,SAAAmC,GAAC,OAAIA,EAAEC,UAAQC,QAAO,SAAAC,GAAC,OAAKC,MAAMD,MAEhEE,EAAmBzC,EAAMsC,QAAO,SAAAF,GAAC,MAAe,sBAAXA,EAAEC,QACvCK,EAAW1C,EAAMsC,QAAO,SAAAF,GAAC,MAAe,aAAXA,EAAEC,QAAqBJ,UAE1D,OACI,yBAAK/C,UAAU,OACb,kBAAC,IAAWyD,MAAZ,KAAkB,kBAAC,IAAD,CAAM3B,KAAK,SAA7B,cAEA,kBAAC,IAAW2B,MAAZ,CAAkBC,MAAO,EAAG1D,UAAU,aACpC,kBAAC,IAAD,CAAM8B,KAAK,YADb,sBAGA,kBAAC,EAAD,CAAUhB,MAAOyC,IACjB,kBAAC,EAAD,CAAezC,MAAO0C,IAGpBR,EAAMjC,KAAI,SAACoC,EAAMnC,GAAP,OACN,yBAAKK,IAAKL,GACR,kBAAC,IAAD,KAAO,kBAAC,IAAWyC,MAAZ,CAAkBC,MAAO,EAAG1D,UAAU,4BAA4BmD,IACzE,kBAAC,EAAD,CAAUrC,MAAOgC,EAAYM,QAAO,SAAAF,GAAC,OAAIA,EAAEC,OAASA,aEtBhDQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.a2282fc2.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card, Icon, Tag} from 'antd';\n\nconst Book = ({book}) => {\n  return (\n      <div className=\"Book\">\n        <Card\n            size=\"small\"\n            hoverable\n            cover={\n              <>\n                <img src={book.image} alt=\"Book cover\"/>\n                <div className=\"Book-year\">\n                  <div className=\"Book-year-text\">\n                    {book.year_published}\n                  </div>\n                </div>\n              </>\n            }\n        >\n          <div className=\"Book-tags\">\n            {/*    <div><Tag>{book.genre}</Tag></div>*/}\n            {/*    <div><Tag>{book.international ? 'Non-US ' : ''}{book.ethnicity} {book.gender}</Tag></div>*/}\n          </div>\n          <Card.Meta\n              title={book.title}\n              description={\n                <>\n                  <div>{book.series}</div>\n                  <div>by {book.author}</div>\n                </>\n              }\n          />\n        </Card>\n      </div>\n  );\n};\n\nexport default Book;\n","import React from 'react';\nimport {Row, Col} from 'antd';\nimport Book from './Book';\n\nconst BookList = ({books}) => {\n  return (\n      <Row className=\"BookList\">\n        {books.map((book, idx) =>\n            <Col xs={12} sm={8} md={6} lg={4} className=\"BookList-item\">\n              <div className=\"BookList-item-margin\">\n                <Book book={book} key={idx}/>\n              </div>\n            </Col>\n        )}\n      </Row>\n  )\n};\n\nexport default BookList;\n","import React from \"react\";\nimport { Drawer, Button, Icon } from 'antd';\nimport BookList from \"./BookList\";\n\nclass UpcomingBooks extends React.Component {\n  state = { visible: false };\n\n  showDrawer = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  onClose = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    const { books } = this.props;\n\n    return (\n        <div>\n          <Button type=\"default\" onClick={this.showDrawer}>\n            View {books.length} Upcoming Book{books.length === 1 ? '' : 's'}<Icon type=\"double-right\" />\n          </Button>\n          <Drawer\n              title={`Upcoming Books (${books.length})`}\n              placement=\"bottom\"\n              closable\n              onClose={this.onClose}\n              visible={this.state.visible}\n              height={515}\n          >\n            <BookList books={books} />\n          </Drawer>\n        </div>\n    );\n  }\n}\n\nexport default UpcomingBooks;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport BookList from \"./components/BookList\";\nimport UpcomingBooks from \"./components/UpcomingBooks\";\nimport * as api from './api';\nimport {Typography, Affix, Icon} from 'antd';\n\nconst App = () => {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    api.getBooks().then(setBooks);\n  }, []);\n\n  const recentBooks = books.reverse();\n  const years = [...new Set(books.map(b => b.year))].filter(y => !isNaN(y));\n\n  const currentlyReading = books.filter(b => b.year === 'Currently Reading');\n  const upcoming = books.filter(b => b.year === 'Upcoming').reverse();\n\n  return (\n      <div className=\"App\">\n        <Typography.Title><Icon type=\"book\" /> Book Club</Typography.Title>\n\n        <Typography.Title level={2} className=\"BookGroup\">\n          <Icon type=\"pushpin\" /> Currently Reading\n        </Typography.Title>\n        <BookList books={currentlyReading} />\n        <UpcomingBooks books={upcoming} />\n\n        {\n          years.map((year, idx) =>\n              <div key={idx}>\n                <Affix><Typography.Title level={2} className=\"BookGroup BookGroup-year\">{year}</Typography.Title></Affix>\n                <BookList books={recentBooks.filter(b => b.year === year)}/>\n              </div>\n          )}\n      </div>\n  );\n};\n\nexport default App;\n","const sheetBestUrl = \"https://sheet.best/api/sheets/aa1f111c-28d5-4803-bf7f-64a3f2295352\";\n\nexport const getBooks = () => {\n  return fetch(sheetBestUrl)\n    .then((response) => {\n      return response.json();\n    });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}